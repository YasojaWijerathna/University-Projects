/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lk.starfield.yasoja.gui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.intellijthemes.FlatLightFlatIJTheme;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import lk.starfield.yasoja.validation.Validation;
import raven.toast.Notifications;
import java.sql.*;
import javax.swing.ImageIcon;
import lk.starfield.yasoja.connection.Mysql;
import lk.starfield.yasoja.logger.Logger;
import lk.starfield.yasoja.validation.Valid_Status;

/**
 *
 * @author dnana
 */
public class Login extends javax.swing.JFrame {

    public static String fname="";
    public static String lname="";

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        init();
    }

    public void init() {
        ImageIcon icon = new ImageIcon(getClass().getResource("/lk/starfield/yasoja/img/StarField_crop.png"));
        this.setIconImage(icon.getImage());

        Notifications.getInstance().setJFrame(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background2 = new lk.starfield.yasoja.main_components.Background();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        roundPasswordField2 = new lk.starfield.yasoja.main_components.roundPasswordField();
        roundButton1 = new lk.starfield.yasoja.main_components.roundButton();
        roundTextField1 = new lk.starfield.yasoja.main_components.roundTextField();
        login_splash1 = new lk.starfield.yasoja.sub_custom_components.Login_splash();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background2.setBackground(new java.awt.Color(255, 255, 255));
        background2.setPreferredSize(new java.awt.Dimension(680, 440));

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(207, 22, 180));
        jLabel2.setText("Login");

        jSeparator1.setForeground(new java.awt.Color(207, 22, 180));

        jLabel3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Email");

        jLabel4.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Password");

        roundPasswordField2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        roundButton1.setBackground(new java.awt.Color(24, 190, 188));
        roundButton1.setForeground(new java.awt.Color(255, 255, 255));
        roundButton1.setText("Login");
        roundButton1.setFont(new java.awt.Font("DialogInput", 1, 20)); // NOI18N
        roundButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundButton1ActionPerformed(evt);
            }
        });

        roundTextField1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        roundTextField1.setPreferredSize(new java.awt.Dimension(109, 22));

        javax.swing.GroupLayout login_splash1Layout = new javax.swing.GroupLayout(login_splash1);
        login_splash1.setLayout(login_splash1Layout);
        login_splash1Layout.setHorizontalGroup(
            login_splash1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 339, Short.MAX_VALUE)
        );
        login_splash1Layout.setVerticalGroup(
            login_splash1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout background2Layout = new javax.swing.GroupLayout(background2);
        background2.setLayout(background2Layout);
        background2Layout.setHorizontalGroup(
            background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(background2Layout.createSequentialGroup()
                .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(background2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(background2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roundPasswordField2, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(roundTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(background2Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(roundButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(login_splash1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(background2Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addContainerGap(549, Short.MAX_VALUE)))
        );
        background2Layout.setVerticalGroup(
            background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(background2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(roundTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(roundPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(roundButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
            .addComponent(login_splash1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(background2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(background2Layout.createSequentialGroup()
                    .addGap(86, 86, 86)
                    .addComponent(jLabel3)
                    .addGap(67, 67, 67)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(239, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background2, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void roundButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundButton1ActionPerformed
        String username = roundTextField1.getText();
        String password = String.valueOf(roundPasswordField2.getPassword());

        if (usernameValidate(username)) {
            return;
        } else if (passwordValidate(password)) {
            return;
        } else {
            try {
                ResultSet loginRS = Mysql.search("SELECT * FROM `login` "
                        + "INNER JOIN `status` ON `status`.`id`=`login`.`status_id`"
                        + "INNER JOIN `user` ON `user`.`id`=`login`.`user_id` "
                        + " WHERE `username` ='" + username + "' AND `password`='" + password + "' ");

                if (loginRS.next()) {

                    if (loginRS.getString("status.status").equals(Valid_Status.ACTIVE.name())) {

                        fname=loginRS.getString("fname");
                        lname=loginRS.getString("lname");
                        
                        
                        Dashboard dashboard=new Dashboard();
                        dashboard.setVisible(true);
                        this.dispose();

                    } else {
                        Notifications.getInstance().show(Notifications.Type.WARNING,
                                Notifications.Location.TOP_CENTER, "User not active");
                    }
                } else {
                    Notifications.getInstance().show(Notifications.Type.WARNING,
                            Notifications.Location.TOP_CENTER, "Invalid Username or Password");
                }
            } catch (SQLException e) {
                Logger.log(String.valueOf(e));
            }
        }
    }//GEN-LAST:event_roundButton1ActionPerformed

    private boolean usernameValidate(String username) {
        if (username.isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Username is not filled");
            return true;
        } else if (username.length() < 3) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Username cannot be shorter than 3 characters");
            return true;
        }
        return false;
    }

    private boolean passwordValidate(String password) {
        if (password.isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Password is not filled");

            return true;
        } else if (!password.matches(Validation.PASSWORD_VALIDATION.validate())) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Password is not Valid."
                    + "Your password should include atleast one special character,"
                    + "capital letter,simple letter,numver");
            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightFlatIJTheme.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private lk.starfield.yasoja.main_components.Background background2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private lk.starfield.yasoja.sub_custom_components.Login_splash login_splash1;
    private lk.starfield.yasoja.main_components.roundButton roundButton1;
    private lk.starfield.yasoja.main_components.roundPasswordField roundPasswordField2;
    private lk.starfield.yasoja.main_components.roundTextField roundTextField1;
    // End of variables declaration//GEN-END:variables
}
